// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template unit_test.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import java.util.Set;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import com.google.common.collect.ImmutableList;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.hamcrest.CoreMatchers;



public class OFPortDescStatsReplyVer15Test {
    OFFactory factory;

    final static byte[] PORT_DESC_STATS_REPLY_SERIALIZED =
        new byte[] { 0x6, 0x13, 0x0, 0x58, 0x12, 0x34, 0x56, 0x78, 0x0, 0xd, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x48, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x0, 0x0, 0x50, 0x6f, 0x72, 0x74, 0x31, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x6 };

    @Before
    public void setup() {
        factory = OFFactoryVer15.INSTANCE;
    }

    @Test
    public void testWrite() {
        OFPortDescStatsReply.Builder builder = factory.buildPortDescStatsReply();
        builder
        .setXid(0x12345678)
        .setFlags(ImmutableSet.<OFStatsReplyFlags>of(OFStatsReplyFlags.REPLY_MORE))
        .setEntries(ImmutableList.<OFPortDesc>of(factory.buildPortDesc().setPortNo(OFPort.of(1))
                                                                    .setHwAddr(MacAddress.of("00:01:02:03:04:05"))
                                                                    .setName("Port1")
                                                                    .setConfig(ImmutableSet.<OFPortConfig>of(OFPortConfig.PORT_DOWN))
                                                                    .setState(ImmutableSet.<OFPortState>of(OFPortState.LIVE))
                                                                    .setProperties(ImmutableList.<OFPortDescProp>of(factory.buildPortDescPropEthernet().setCurr(1)
                                                                                                                                                        .setAdvertised(2)
                                                                                                                                                        .setSupported(3)
                                                                                                                                                        .setPeer(4)
                                                                                                                                                        .setCurrSpeed(5)
                                                                                                                                                        .setMaxSpeed(6)
                                                                                                                                                        .build()
                                            )).build()))
        .build();;
        OFPortDescStatsReply portDescStatsReply = builder.build();
        ByteBuf bb = Unpooled.buffer();
        portDescStatsReply.writeTo(bb);
        byte[] written = new byte[bb.readableBytes()];
        bb.readBytes(written);

        assertThat(written, CoreMatchers.equalTo(PORT_DESC_STATS_REPLY_SERIALIZED));
    }

    @Test
    public void testRead() throws Exception {
        OFPortDescStatsReply.Builder builder = factory.buildPortDescStatsReply();
        builder
        .setXid(0x12345678)
        .setFlags(ImmutableSet.<OFStatsReplyFlags>of(OFStatsReplyFlags.REPLY_MORE))
        .setEntries(ImmutableList.<OFPortDesc>of(factory.buildPortDesc().setPortNo(OFPort.of(1))
                                                                    .setHwAddr(MacAddress.of("00:01:02:03:04:05"))
                                                                    .setName("Port1")
                                                                    .setConfig(ImmutableSet.<OFPortConfig>of(OFPortConfig.PORT_DOWN))
                                                                    .setState(ImmutableSet.<OFPortState>of(OFPortState.LIVE))
                                                                    .setProperties(ImmutableList.<OFPortDescProp>of(factory.buildPortDescPropEthernet().setCurr(1)
                                                                                                                                                        .setAdvertised(2)
                                                                                                                                                        .setSupported(3)
                                                                                                                                                        .setPeer(4)
                                                                                                                                                        .setCurrSpeed(5)
                                                                                                                                                        .setMaxSpeed(6)
                                                                                                                                                        .build()
                                            )).build()))
        .build();;
        OFPortDescStatsReply portDescStatsReplyBuilt = builder.build();

        ByteBuf input = Unpooled.copiedBuffer(PORT_DESC_STATS_REPLY_SERIALIZED);

        // FIXME should invoke the overall reader once implemented
        OFPortDescStatsReply portDescStatsReplyRead = OFPortDescStatsReplyVer15.READER.readFrom(input);
        assertEquals(PORT_DESC_STATS_REPLY_SERIALIZED.length, input.readerIndex());

        assertEquals(portDescStatsReplyBuilt, portDescStatsReplyRead);
   }

   @Test
   public void testReadWrite() throws Exception {
       ByteBuf input = Unpooled.copiedBuffer(PORT_DESC_STATS_REPLY_SERIALIZED);

       // FIXME should invoke the overall reader once implemented
       OFPortDescStatsReply portDescStatsReply = OFPortDescStatsReplyVer15.READER.readFrom(input);
       assertEquals(PORT_DESC_STATS_REPLY_SERIALIZED.length, input.readerIndex());

       // write message again
       ByteBuf bb = Unpooled.buffer();
       portDescStatsReply.writeTo(bb);
       byte[] written = new byte[bb.readableBytes()];
       bb.readBytes(written);

       assertThat(written, CoreMatchers.equalTo(PORT_DESC_STATS_REPLY_SERIALIZED));
   }

}
