// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template unit_test.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import java.util.Arrays;
import java.util.List;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.hamcrest.CoreMatchers;



public class OFPacketOutVer15Test {
    OFFactory factory;

    final static byte[] PACKET_OUT_SERIALIZED =
        new byte[] { 0x6, 0xd, 0x0, 0x43, 0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x64, 0x0, 0x18, 0x0, 0x0, 0x0, 0x1, 0x0, 0x16, (byte) 0x80, 0x0, 0x1, 0x8, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x5, (byte) 0x80, 0x0, 0x2a, 0x2, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x2, (byte) 0xff, (byte) 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x61, 0x62, 0x63 };

    @Before
    public void setup() {
        factory = OFFactoryVer15.INSTANCE;
    }

    @Test
    public void testWrite() {
        OFPacketOut.Builder builder = factory.buildPacketOut();
        builder
        .setXid(0x12345678)
        .setBufferId(OFBufferId.of(100))
        .setMatch(
        factory.buildMatchV3()
            .setMasked(MatchField.IN_PORT, OFPort.of(4), OFPort.of(5))
            .setExact(MatchField.ARP_OP, ArpOpcode.REQUEST)
            .build())
        .setActions(Arrays.asList(new OFAction[] {factory.actions().buildOutput().setPort(OFPort.of(2)).setMaxLen(65535).build(), factory.actions().decNwTtl()}))
        .setData(new byte[] {97,98,99})
        .build();
        OFPacketOut packetOut = builder.build();
        ByteBuf bb = Unpooled.buffer();
        packetOut.writeTo(bb);
        byte[] written = new byte[bb.readableBytes()];
        bb.readBytes(written);

        assertThat(written, CoreMatchers.equalTo(PACKET_OUT_SERIALIZED));
    }

    @Test
    public void testRead() throws Exception {
        OFPacketOut.Builder builder = factory.buildPacketOut();
        builder
        .setXid(0x12345678)
        .setBufferId(OFBufferId.of(100))
        .setMatch(
        factory.buildMatchV3()
            .setMasked(MatchField.IN_PORT, OFPort.of(4), OFPort.of(5))
            .setExact(MatchField.ARP_OP, ArpOpcode.REQUEST)
            .build())
        .setActions(Arrays.asList(new OFAction[] {factory.actions().buildOutput().setPort(OFPort.of(2)).setMaxLen(65535).build(), factory.actions().decNwTtl()}))
        .setData(new byte[] {97,98,99})
        .build();
        OFPacketOut packetOutBuilt = builder.build();

        ByteBuf input = Unpooled.copiedBuffer(PACKET_OUT_SERIALIZED);

        // FIXME should invoke the overall reader once implemented
        OFPacketOut packetOutRead = OFPacketOutVer15.READER.readFrom(input);
        assertEquals(PACKET_OUT_SERIALIZED.length, input.readerIndex());

        assertEquals(packetOutBuilt, packetOutRead);
   }

   @Test
   public void testReadWrite() throws Exception {
       ByteBuf input = Unpooled.copiedBuffer(PACKET_OUT_SERIALIZED);

       // FIXME should invoke the overall reader once implemented
       OFPacketOut packetOut = OFPacketOutVer15.READER.readFrom(input);
       assertEquals(PACKET_OUT_SERIALIZED.length, input.readerIndex());

       // write message again
       ByteBuf bb = Unpooled.buffer();
       packetOut.writeTo(bb);
       byte[] written = new byte[bb.readableBytes()];
       bb.readBytes(written);

       assertThat(written, CoreMatchers.equalTo(PACKET_OUT_SERIALIZED));
   }

}
