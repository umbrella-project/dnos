// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template unit_test.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import java.util.EnumSet;
import java.util.Set;
import com.google.common.collect.Sets;
import java.util.Arrays;
import java.util.List;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.hamcrest.CoreMatchers;



public class OFPortStatusVer15Test {
    OFFactory factory;

    final static byte[] PORT_STATUS_SERIALIZED =
        new byte[] { 0x6, 0xc, 0x0, 0x58, 0x12, 0x34, 0x56, 0x78, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x48, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x34, 0x56, 0x0, 0x0, 0x61, 0x62, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0xa, 0x0, 0x0, 0x0, 0xe };

    @Before
    public void setup() {
        factory = OFFactoryVer15.INSTANCE;
    }

    @Test
    public void testWrite() {
        OFPortStatus.Builder builder = factory.buildPortStatus();
        builder
        .setXid(0x12345678)
        .setReason(OFPortReason.ADD)
        .setDesc(factory.buildPortDesc()
                        .setPortNo(OFPort.ofInt(4))
                        .setHwAddr(MacAddress.of(0x123456))
                        .setName("abc")
                        .setConfig(Sets.immutableEnumSet(OFPortConfig.PORT_DOWN))
                        .setState(Sets.immutableEnumSet(OFPortState.LINK_DOWN))
                        .setProperties(Arrays.asList(new OFPortDescProp[] {factory.buildPortDescPropEthernet()
                        .setCurr(1)
                        .setAdvertised(2)
                        .setSupported(4)
                        .setPeer(8)
                        .setCurrSpeed(10)
                        .setMaxSpeed(14)
                        .build()})).build());
        OFPortStatus portStatus = builder.build();
        ByteBuf bb = Unpooled.buffer();
        portStatus.writeTo(bb);
        byte[] written = new byte[bb.readableBytes()];
        bb.readBytes(written);

        assertThat(written, CoreMatchers.equalTo(PORT_STATUS_SERIALIZED));
    }

    @Test
    public void testRead() throws Exception {
        OFPortStatus.Builder builder = factory.buildPortStatus();
        builder
        .setXid(0x12345678)
        .setReason(OFPortReason.ADD)
        .setDesc(factory.buildPortDesc()
                        .setPortNo(OFPort.ofInt(4))
                        .setHwAddr(MacAddress.of(0x123456))
                        .setName("abc")
                        .setConfig(Sets.immutableEnumSet(OFPortConfig.PORT_DOWN))
                        .setState(Sets.immutableEnumSet(OFPortState.LINK_DOWN))
                        .setProperties(Arrays.asList(new OFPortDescProp[] {factory.buildPortDescPropEthernet()
                        .setCurr(1)
                        .setAdvertised(2)
                        .setSupported(4)
                        .setPeer(8)
                        .setCurrSpeed(10)
                        .setMaxSpeed(14)
                        .build()})).build());
        OFPortStatus portStatusBuilt = builder.build();

        ByteBuf input = Unpooled.copiedBuffer(PORT_STATUS_SERIALIZED);

        // FIXME should invoke the overall reader once implemented
        OFPortStatus portStatusRead = OFPortStatusVer15.READER.readFrom(input);
        assertEquals(PORT_STATUS_SERIALIZED.length, input.readerIndex());

        assertEquals(portStatusBuilt, portStatusRead);
   }

   @Test
   public void testReadWrite() throws Exception {
       ByteBuf input = Unpooled.copiedBuffer(PORT_STATUS_SERIALIZED);

       // FIXME should invoke the overall reader once implemented
       OFPortStatus portStatus = OFPortStatusVer15.READER.readFrom(input);
       assertEquals(PORT_STATUS_SERIALIZED.length, input.readerIndex());

       // write message again
       ByteBuf bb = Unpooled.buffer();
       portStatus.writeTo(bb);
       byte[] written = new byte[bb.readableBytes()];
       bb.readBytes(written);

       assertThat(written, CoreMatchers.equalTo(PORT_STATUS_SERIALIZED));
   }

}
