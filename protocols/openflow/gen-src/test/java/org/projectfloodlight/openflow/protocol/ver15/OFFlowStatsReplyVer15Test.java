// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template unit_test.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import static org.junit.Assert.*;
import org.junit.Test;
import org.junit.Before;
import java.util.Set;
import com.google.common.collect.ImmutableSet;
import java.util.List;
import com.google.common.collect.ImmutableList;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import org.hamcrest.CoreMatchers;



public class OFFlowStatsReplyVer15Test {
    OFFactory factory;

    final static byte[] FLOW_STATS_REPLY_SERIALIZED =
        new byte[] { 0x6, 0x13, 0x0, 0x68, 0x12, 0x34, 0x56, 0x78, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x10, 0x0, 0x60, 0x0, 0x1, 0x0, 0x1, (byte) 0xfe, (byte) 0xdc, (byte) 0xba, (byte) 0x98, 0x76, 0x54, 0x32, 0x10, 0x0, 0x1, 0x0, 0x10, (byte) 0x80, 0x0, 0x1, 0x8, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x1c, (byte) 0x80, 0x2, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, (byte) 0x80, 0x2, 0x2, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x8, 0x4, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x8, 0x7, 0x0, 0x0, 0x0 };

    @Before
    public void setup() {
        factory = OFFactoryVer15.INSTANCE;
    }

    @Test
    public void testWrite() {
        OFFlowStatsReply.Builder builder = factory.buildFlowStatsReply();
        builder
        .setXid(0x12345678)
        .setFlags(ImmutableSet.<OFStatsReplyFlags>of(OFStatsReplyFlags.REPLY_MORE))
        .setEntries(ImmutableList.<OFFlowStatsEntry>of(
                        factory.buildFlowStatsEntry().setTableId(TableId.of(1))
                                                    .setPriority(1)
                                                    .setIdleTimeout(16)
                                                    .setHardTimeout(96)
                                                    .setFlags(ImmutableSet.<OFFlowModFlags>of(OFFlowModFlags.SEND_FLOW_REM))
                                                    .setImportance(1)
                                                    .setCookie(U64.parseHex("FEDCBA9876543210"))
                                                    .setMatch(factory.buildMatch()
                                                        .setMasked(MatchField.IN_PORT, OFPort.of(4), OFPort.of(5))
                                                        .build())
                                                    .setStats(factory.buildStatV6()
                                                        .setOxsFields(OFOxsList.of(factory.oxss().buildDuration().setValue(U64.of(4)).build(),
                                                                                    factory.oxss().buildIdleTime().setValue(U64.of(6)).build()))
                                                        .build())
                                                    .setInstructions(ImmutableList.<OFInstruction>of(
                                                                                    factory.instructions().gotoTable(TableId.of(4)),
                                                                                    factory.instructions().gotoTable(TableId.of(7))))
                                                    .build() ))
        .build();
        OFFlowStatsReply flowStatsReply = builder.build();
        ByteBuf bb = Unpooled.buffer();
        flowStatsReply.writeTo(bb);
        byte[] written = new byte[bb.readableBytes()];
        bb.readBytes(written);

        assertThat(written, CoreMatchers.equalTo(FLOW_STATS_REPLY_SERIALIZED));
    }

    @Test
    public void testRead() throws Exception {
        OFFlowStatsReply.Builder builder = factory.buildFlowStatsReply();
        builder
        .setXid(0x12345678)
        .setFlags(ImmutableSet.<OFStatsReplyFlags>of(OFStatsReplyFlags.REPLY_MORE))
        .setEntries(ImmutableList.<OFFlowStatsEntry>of(
                        factory.buildFlowStatsEntry().setTableId(TableId.of(1))
                                                    .setPriority(1)
                                                    .setIdleTimeout(16)
                                                    .setHardTimeout(96)
                                                    .setFlags(ImmutableSet.<OFFlowModFlags>of(OFFlowModFlags.SEND_FLOW_REM))
                                                    .setImportance(1)
                                                    .setCookie(U64.parseHex("FEDCBA9876543210"))
                                                    .setMatch(factory.buildMatch()
                                                        .setMasked(MatchField.IN_PORT, OFPort.of(4), OFPort.of(5))
                                                        .build())
                                                    .setStats(factory.buildStatV6()
                                                        .setOxsFields(OFOxsList.of(factory.oxss().buildDuration().setValue(U64.of(4)).build(),
                                                                                    factory.oxss().buildIdleTime().setValue(U64.of(6)).build()))
                                                        .build())
                                                    .setInstructions(ImmutableList.<OFInstruction>of(
                                                                                    factory.instructions().gotoTable(TableId.of(4)),
                                                                                    factory.instructions().gotoTable(TableId.of(7))))
                                                    .build() ))
        .build();
        OFFlowStatsReply flowStatsReplyBuilt = builder.build();

        ByteBuf input = Unpooled.copiedBuffer(FLOW_STATS_REPLY_SERIALIZED);

        // FIXME should invoke the overall reader once implemented
        OFFlowStatsReply flowStatsReplyRead = OFFlowStatsReplyVer15.READER.readFrom(input);
        assertEquals(FLOW_STATS_REPLY_SERIALIZED.length, input.readerIndex());

        assertEquals(flowStatsReplyBuilt, flowStatsReplyRead);
   }

   @Test
   public void testReadWrite() throws Exception {
       ByteBuf input = Unpooled.copiedBuffer(FLOW_STATS_REPLY_SERIALIZED);

       // FIXME should invoke the overall reader once implemented
       OFFlowStatsReply flowStatsReply = OFFlowStatsReplyVer15.READER.readFrom(input);
       assertEquals(FLOW_STATS_REPLY_SERIALIZED.length, input.readerIndex());

       // write message again
       ByteBuf bb = Unpooled.buffer();
       flowStatsReply.writeTo(bb);
       byte[] written = new byte[bb.readableBytes()];
       bb.readBytes(written);

       assertThat(written, CoreMatchers.equalTo(FLOW_STATS_REPLY_SERIALIZED));
   }

}
