// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFPortDescPropType;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFPortDescPropTypeSerializerVer15 {

    public final static short ETHERNET_VAL = (short) 0x0;
    public final static short OPTICAL_VAL = (short) 0x1;
    public final static short PIPELINE_INPUT_VAL = (short) 0x2;
    public final static short PIPELINE_OUTPUT_VAL = (short) 0x3;
    public final static short RECIRCULATE_VAL = (short) 0x4;
    public final static short EXPERIMENTER_VAL = (short) 0xffff;

    public static OFPortDescPropType readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(U8.f(bb.readByte()));
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFPortDescPropType e) {
        bb.writeByte(U8.t(toWireValue(e)));
    }

    public static void putTo(OFPortDescPropType e, PrimitiveSink sink) {
        sink.putShort(toWireValue(e));
    }

    public static OFPortDescPropType ofWireValue(short val) {
        switch(val) {
            case ETHERNET_VAL:
                return OFPortDescPropType.ETHERNET;
            case OPTICAL_VAL:
                return OFPortDescPropType.OPTICAL;
            case PIPELINE_INPUT_VAL:
                return OFPortDescPropType.PIPELINE_INPUT;
            case PIPELINE_OUTPUT_VAL:
                return OFPortDescPropType.PIPELINE_OUTPUT;
            case RECIRCULATE_VAL:
                return OFPortDescPropType.RECIRCULATE;
            case EXPERIMENTER_VAL:
                return OFPortDescPropType.EXPERIMENTER;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFPortDescPropType in version 1.5: " + val);
        }
    }


    public static short toWireValue(OFPortDescPropType e) {
        switch(e) {
            case ETHERNET:
                return ETHERNET_VAL;
            case OPTICAL:
                return OPTICAL_VAL;
            case PIPELINE_INPUT:
                return PIPELINE_INPUT_VAL;
            case PIPELINE_OUTPUT:
                return PIPELINE_OUTPUT_VAL;
            case RECIRCULATE:
                return RECIRCULATE_VAL;
            case EXPERIMENTER:
                return EXPERIMENTER_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFPortDescPropType in version 1.5: " + e);
        }
    }

}
