// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver13;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFBsnHashType;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;

public class OFBsnHashTypeSerializerVer13 {

    public final static byte BSN_HASH_TYPE_L2_VAL = (byte) 0x0;
    public final static byte BSN_HASH_TYPE_L3_VAL = (byte) 0x1;
    public final static byte BSN_HASH_TYPE_ENHANCED_VAL = (byte) 0x2;

    public static OFBsnHashType readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readByte());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, OFBsnHashType e) {
        bb.writeByte(toWireValue(e));
    }

    public static void putTo(OFBsnHashType e, PrimitiveSink sink) {
        sink.putByte(toWireValue(e));
    }

    public static OFBsnHashType ofWireValue(byte val) {
        switch(val) {
            case BSN_HASH_TYPE_L2_VAL:
                return OFBsnHashType.BSN_HASH_TYPE_L2;
            case BSN_HASH_TYPE_L3_VAL:
                return OFBsnHashType.BSN_HASH_TYPE_L3;
            case BSN_HASH_TYPE_ENHANCED_VAL:
                return OFBsnHashType.BSN_HASH_TYPE_ENHANCED;
            default:
                throw new IllegalArgumentException("Illegal wire value for type OFBsnHashType in version 1.3: " + val);
        }
    }


    public static byte toWireValue(OFBsnHashType e) {
        switch(e) {
            case BSN_HASH_TYPE_L2:
                return BSN_HASH_TYPE_L2_VAL;
            case BSN_HASH_TYPE_L3:
                return BSN_HASH_TYPE_L3_VAL;
            case BSN_HASH_TYPE_ENHANCED:
                return BSN_HASH_TYPE_ENHANCED_VAL;
            default:
                throw new IllegalArgumentException("Illegal enum value for type OFBsnHashType in version 1.3: " + e);
        }
    }

}
