// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_set_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFBsnHashSelectFlags;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import java.util.EnumSet;
import java.util.Collections;


public class OFBsnHashSelectFlagsSerializerVer15 {

    public final static int BSN_HASH_SELECT_SRC_IP_VAL = 0x1;
    public final static int BSN_HASH_SELECT_DST_IP_VAL = 0x2;

    public static Set<OFBsnHashSelectFlags> readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readInt());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, Set<OFBsnHashSelectFlags> set) {
        bb.writeInt(toWireValue(set));
    }

    public static void putTo(Set<OFBsnHashSelectFlags> set, PrimitiveSink sink) {
        sink.putInt(toWireValue(set));
    }


    public static Set<OFBsnHashSelectFlags> ofWireValue(int val) {
        EnumSet<OFBsnHashSelectFlags> set = EnumSet.noneOf(OFBsnHashSelectFlags.class);

        if((val & BSN_HASH_SELECT_SRC_IP_VAL) != 0)
            set.add(OFBsnHashSelectFlags.BSN_HASH_SELECT_SRC_IP);
        if((val & BSN_HASH_SELECT_DST_IP_VAL) != 0)
            set.add(OFBsnHashSelectFlags.BSN_HASH_SELECT_DST_IP);
        return Collections.unmodifiableSet(set);
    }

    public static int toWireValue(Set<OFBsnHashSelectFlags> set) {
        int wireValue = 0;

        for(OFBsnHashSelectFlags e: set) {
            switch(e) {
                case BSN_HASH_SELECT_SRC_IP:
                    wireValue |= BSN_HASH_SELECT_SRC_IP_VAL;
                    break;
                case BSN_HASH_SELECT_DST_IP:
                    wireValue |= BSN_HASH_SELECT_DST_IP_VAL;
                    break;
                default:
                    throw new IllegalArgumentException("Illegal enum value for type OFBsnHashSelectFlags in version 1.5: " + e);
            }
        }
        return wireValue;
    }

}
