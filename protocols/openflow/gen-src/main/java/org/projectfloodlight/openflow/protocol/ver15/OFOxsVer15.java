// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_virtual_class.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver15;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import io.netty.buffer.ByteBuf;

abstract class OFOxsVer15 {
    // version: 1.5
    final static byte WIRE_VERSION = 6;
    final static int MINIMUM_LENGTH = 4;


    public final static OFOxsVer15.Reader READER = new Reader();

    static class Reader implements OFMessageReader<OFOxs<?>> {
        @Override
        public OFOxs<?> readFrom(ByteBuf bb) throws OFParseError {
            if(bb.readableBytes() < MINIMUM_LENGTH)
                return null;
            int start = bb.readerIndex();
            int typeLen = bb.readInt();
            bb.readerIndex(start);
            switch(typeLen) {
               case (int) 0x80020808:
                   // discriminator value 0x80020808L=0x80020808L for class OFOxsByteCountVer15
                   return OFOxsByteCountVer15.READER.readFrom(bb);
               case (int) 0x80020008:
                   // discriminator value 0x80020008L=0x80020008L for class OFOxsDurationVer15
                   return OFOxsDurationVer15.READER.readFrom(bb);
               case (int) 0x80020404:
                   // discriminator value 0x80020404L=0x80020404L for class OFOxsFlowCountVer15
                   return OFOxsFlowCountVer15.READER.readFrom(bb);
               case (int) 0x80020208:
                   // discriminator value 0x80020208L=0x80020208L for class OFOxsIdleTimeVer15
                   return OFOxsIdleTimeVer15.READER.readFrom(bb);
               case (int) 0x80020608:
                   // discriminator value 0x80020608L=0x80020608L for class OFOxsPacketCountVer15
                   return OFOxsPacketCountVer15.READER.readFrom(bb);
               default:
                   throw new OFParseError("Unknown value for discriminator typeLen of class OFOxsVer15: " + typeLen);
            }
        }
    }
}
