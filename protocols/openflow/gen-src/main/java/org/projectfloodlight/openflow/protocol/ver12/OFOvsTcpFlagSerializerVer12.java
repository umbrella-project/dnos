// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template const_set_serializer.java
// Do not modify

package org.projectfloodlight.openflow.protocol.ver12;

import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.*;
import org.projectfloodlight.openflow.protocol.actionid.*;
import org.projectfloodlight.openflow.protocol.bsntlv.*;
import org.projectfloodlight.openflow.protocol.errormsg.*;
import org.projectfloodlight.openflow.protocol.meterband.*;
import org.projectfloodlight.openflow.protocol.instruction.*;
import org.projectfloodlight.openflow.protocol.instructionid.*;
import org.projectfloodlight.openflow.protocol.match.*;
import org.projectfloodlight.openflow.protocol.stat.*;
import org.projectfloodlight.openflow.protocol.oxm.*;
import org.projectfloodlight.openflow.protocol.oxs.*;
import org.projectfloodlight.openflow.protocol.queueprop.*;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.util.*;
import org.projectfloodlight.openflow.exceptions.*;
import org.projectfloodlight.openflow.protocol.OFOvsTcpFlag;
import java.util.Set;
import io.netty.buffer.ByteBuf;
import com.google.common.hash.PrimitiveSink;
import java.util.EnumSet;
import java.util.Collections;


public class OFOvsTcpFlagSerializerVer12 {

    public final static short OVS_TCP_FLAG_FIN_VAL = (short) 0x1;
    public final static short OVS_TCP_FLAG_SYN_VAL = (short) 0x2;
    public final static short OVS_TCP_FLAG_RST_VAL = (short) 0x4;
    public final static short OVS_TCP_FLAG_PSH_VAL = (short) 0x8;
    public final static short OVS_TCP_FLAG_ACK_VAL = (short) 0x10;
    public final static short OVS_TCP_FLAG_URG_VAL = (short) 0x20;
    public final static short OVS_TCP_FLAG_ECE_VAL = (short) 0x40;
    public final static short OVS_TCP_FLAG_CWR_VAL = (short) 0x80;
    public final static short OVS_TCP_FLAG_NS_VAL = (short) 0x100;

    public static Set<OFOvsTcpFlag> readFrom(ByteBuf bb) throws OFParseError {
        try {
            return ofWireValue(bb.readShort());
        } catch (IllegalArgumentException e) {
            throw new OFParseError(e);
        }
    }

    public static void writeTo(ByteBuf bb, Set<OFOvsTcpFlag> set) {
        bb.writeShort(toWireValue(set));
    }

    public static void putTo(Set<OFOvsTcpFlag> set, PrimitiveSink sink) {
        sink.putShort(toWireValue(set));
    }


    public static Set<OFOvsTcpFlag> ofWireValue(short val) {
        EnumSet<OFOvsTcpFlag> set = EnumSet.noneOf(OFOvsTcpFlag.class);

        if((val & OVS_TCP_FLAG_FIN_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_FIN);
        if((val & OVS_TCP_FLAG_SYN_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_SYN);
        if((val & OVS_TCP_FLAG_RST_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_RST);
        if((val & OVS_TCP_FLAG_PSH_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_PSH);
        if((val & OVS_TCP_FLAG_ACK_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_ACK);
        if((val & OVS_TCP_FLAG_URG_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_URG);
        if((val & OVS_TCP_FLAG_ECE_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_ECE);
        if((val & OVS_TCP_FLAG_CWR_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_CWR);
        if((val & OVS_TCP_FLAG_NS_VAL) != 0)
            set.add(OFOvsTcpFlag.OVS_TCP_FLAG_NS);
        return Collections.unmodifiableSet(set);
    }

    public static short toWireValue(Set<OFOvsTcpFlag> set) {
        short wireValue = 0;

        for(OFOvsTcpFlag e: set) {
            switch(e) {
                case OVS_TCP_FLAG_FIN:
                    wireValue |= OVS_TCP_FLAG_FIN_VAL;
                    break;
                case OVS_TCP_FLAG_SYN:
                    wireValue |= OVS_TCP_FLAG_SYN_VAL;
                    break;
                case OVS_TCP_FLAG_RST:
                    wireValue |= OVS_TCP_FLAG_RST_VAL;
                    break;
                case OVS_TCP_FLAG_PSH:
                    wireValue |= OVS_TCP_FLAG_PSH_VAL;
                    break;
                case OVS_TCP_FLAG_ACK:
                    wireValue |= OVS_TCP_FLAG_ACK_VAL;
                    break;
                case OVS_TCP_FLAG_URG:
                    wireValue |= OVS_TCP_FLAG_URG_VAL;
                    break;
                case OVS_TCP_FLAG_ECE:
                    wireValue |= OVS_TCP_FLAG_ECE_VAL;
                    break;
                case OVS_TCP_FLAG_CWR:
                    wireValue |= OVS_TCP_FLAG_CWR_VAL;
                    break;
                case OVS_TCP_FLAG_NS:
                    wireValue |= OVS_TCP_FLAG_NS_VAL;
                    break;
                default:
                    throw new IllegalArgumentException("Illegal enum value for type OFOvsTcpFlag in version 1.2: " + e);
            }
        }
        return wireValue;
    }

}
